1.中间件
2.csrf
3.CBV
4.restful规范
    -10条
    -认识：主要是谈谈个人看法和见解
5.djangorestframework
    -如何认证(基于数据库实现认证)
    -源码流程(面向对象)
6.面向对象
    -封装
        两类封装：
            -把相同的方法和属性封装到一个类中；
            -通过类构造方法将一部分数据封装到一个类中，相当于打包使用。
    -继承
        减少代码耦合度，如果多个类有相同的方法，可以将这些方法写到同一个基类中，然后通过继承实现自动拥有相同的功能
        -广度优先和深度优先？新式类和经典类？
            0.区别：就是版本的区别---3.x之前的版本有经典和新式的区别，3.x之后都是新式类
                “新式类”和“经典类”的区分在Python 3之后就已经不存在，在Python 3.x之后的版本，
                因为所有的类都派生自内置类型object(即使没有显示的继承object类型)，即所有的类都是“新式类”。
            1.新式类：广度优先（新式类的继承顺序并非是广度优先，而是C3算法，只是在部分情况下，C3算法的结果恰巧与广度优先的结果相同。）
                一个实例化对象，调用一个类方法或者类属性的时候，首先会在自身进行查找，如果没有就去继承的第一个基类查找，
                如果没有就去第二个基类查找，直到找到为止。
            2.经典类：深度优先
                一个实例化对象，调用一个类方法或者类属性的时候，首先会在自身进行查找，如果没有就去继承的第一个基类查找，
                如果没有就去第一个基类的第一个父类查找依次往上直到找到为止。
    -多态
        python语言本身就是多态的，给我一个对象，点上一个属性，能跑通，那就是支持这个功能的。
        1、只关心对象的实例方法是否同名，不关心对象所属的类型；
        2、对象所属的类之间，继承关系可有可无；
        3、多态的好处可以增加代码的外部调用灵活度，让代码更加通用，兼容性比较强；
        4、多态是调用方法的技巧，不会影响到类的内部设计。
7.Django请求声明周期
    这个请求周期分两类，请求到来的时候先走django的中间件，然后进行路由匹配，然后走到视图函数
    FBV-如果视图是一个函数，那么直接就执行这个函数
    CBV-如果视图是一个类，那么会去执行dispatch方法，然后进行反射再执行视图函数
   *CBV的核心就是通过dispatch来触发的一系列的响应
8.认证流程（封装request）
9.权限流程
10.节流流程
